# Actions train a model on Azure Machine Learning
name: aml-train
on:
  workflow_dispatch:
    inputs:
      repository:
        description: "The repository from which the slash command was dispatched"
        required: false
      comment-id:
        description: "The comment-id of the slash command"
        required: false
      issue-number:
        description: "The issue number from which the slash command was created"
        required: false
      param-file:
        description: "Parameter file for training, resides in code/train/config directory"
        required: false

concurrency: train-refs/pull/${{ github.event.inputs.issue-number }}/head

jobs:
  train:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
    - name: Check Out Repository
      id: checkout_repository
      uses: actions/checkout@v3

    - name: Setup
      uses: ./.github/actions/env_setup
      with:
        event_name: ${{ github.event_name }}
        az_workspace: ${{ secrets.AZURE_WORKSPACE }}
        az_resource_group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        az_secret: ${{ secrets.AZURE_LOGIN }}

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Setting env var for train parameter file
      run: |
        param_file="dev_params.json"
        deploy_env=${{ job.train.environment.name }}
        case $deploy_env in
          Production | Staging)
            param_file="prd_params.json" && echo "$deploy_env env, using prd_params.json"
            ;;
          Development)
            param_file="dev_params.json" && echo "$deploy_env env, using dev_params.json"
            ;;
        esac
        if [ ! -z ${{ github.event.inputs.param-file }} ]; then      
            param_file=${{ github.event.inputs.param-file }}
            echo "using ${{ github.event.inputs.param-file }} from input"
        fi
        echo "PARAM_FILE=$param_file" >> $GITHUB_ENV

    - name: Create URL to the run output
      id: vars
      run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

    - name: Create comment for training url
      if: ${{ github.event.inputs.issue-number != '' }}
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        issue-number: ${{ github.event.inputs.issue-number }}
        body: |
           Submitting train run, [Click here for more details](${{ steps.vars.outputs.run-url }})

    - name: Submit training run
      id: submit_train
      run: |
        res=$(az ml run submit-script \
        --conda-dependencies ./code/train/environment.yaml \
        --experiment-name iris_experiment \
        --source-directory ./code/train \
        --ct cpu-cluster train.py --param-file ${{ env.PARAM_FILE }})
        echo ::set-output name=response::$res

    - name: Create comment for training response
      if: ${{ github.event.inputs.issue-number != '' }}
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        issue-number: ${{ github.event.inputs.issue-number }}
        body: |
          ${{ steps.submit_train.outputs.response }}
